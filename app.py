import streamlit as st
from dotenv import load_dotenv
import pickle
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAI
from langchain.chains.question_answering import load_qa_chain
from langchain_community.callbacks import get_openai_callback
import os
import requests
import base64

# Set page config
st.set_page_config(
    page_title="Algocs PDF Insights", 
    page_icon="https://media.licdn.com/dms/image/C4D0BAQFdkOo6zVChpg/company-logo_200_200/0/1643229584971/algocs_logo?e=2147483647&v=beta&t=hgON4E4NsV_YqnoT53ujIkbt_f-0qRFpeM-tWAiPPhM"
)

# Load counter
if "query_counter" not in st.session_state:
    st.session_state.query_counter = 3000

# Sidebar contents
with st.sidebar:
    st.image("https://media.licdn.com/dms/image/C4D0BAQFdkOo6zVChpg/company-logo_200_200/0/1643229584971/algocs_logo?e=2147483647&v=beta&t=hgON4E4NsV_YqnoT53ujIkbt_f-0qRFpeM-tWAiPPhM", width=200)  # Adjust the width as needed
    st.title('Algocs PDF Insights')
    st.markdown('''
    ## About
    This app is a PDF insights chatbot built using:
    - [Streamlit](https://streamlit.io/)
    - [LangChain](https://python.langchain.com/)
    - [OpenAI](https://platform.openai.com/docs/models)
    ''')
    st.write('Made with ❤️ by [Anmol Wadhwa](https://linkedin.com/in/anmol-wadhwa) in Delhi')

load_dotenv()

def submit_query_to_google_form(query, response, file_name):
    form_url = 'https://docs.google.com/forms/d/e/1FAIpQLScnwq4U7iLOcq1VKggFp-RdBFF64cd5b3evesGNPcCDbFM9Zw/formResponse'
    form_data = {
        'entry.112538290': query,
        'entry.659081082': response,  # Replace with actual entry ID for the chatbot response
        'entry.1928385184': file_name,  # Replace with actual entry ID for the file name
    }
    response = requests.post(form_url, data=form_data)
    return response

def display_pdf(pdf):
    base64_pdf = base64.b64encode(pdf.read()).decode('utf-8')
    pdf_display = f'<embed src="data:application/pdf;base64,{base64_pdf}" width="700" height="400" type="application/pdf">'
    st.markdown(pdf_display, unsafe_allow_html=True)

def main():
    col1, col2 = st.columns([1, 8])
    with col1:
        st.image("https://media.licdn.com/dms/image/C4D0BAQFdkOo6zVChpg/company-logo_200_200/0/1643229584971/algocs_logo?e=2147483647&v=beta&t=hgON4E4NsV_YqnoT53ujIkbt_f-0qRFpeM-tWAiPPhM", width=60)  # Adjust the width as needed
    with col2:
        st.header("Algocs PDF Insights")

    st.markdown(f'<p style="color: red;">More than {st.session_state.query_counter}+ queries have been hit so far.</p>', unsafe_allow_html=True)
    st.write('''This application allows you to:
    - Upload a PDF document
    - Ask questions about the content of the PDF
    - Receive answers generated by Algocs Insights model based on the PDF content
    - Star this repo on [GitHub](https://github.com/anmolwadhwaxx/RAG)
    ''')

    # Initialize VectorStore to None
    VectorStore = None

    # Upload a PDF file
    pdf = st.file_uploader("Upload your PDF", type='pdf')

    # Process the PDF file
    if pdf is not None:
        display_pdf(pdf)

        pdf_reader = PdfReader(pdf)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()

        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,  # Adjust chunk size as needed
            chunk_overlap=200,
            length_function=len
        )
        chunks = text_splitter.split_text(text=text)

        # Load or create VectorStore
        store_name = pdf.name[:-4]

        try:
            if os.path.exists(f"{store_name}.pkl"):
                with open(f"{store_name}.pkl", "rb") as f:
                    text_chunks = pickle.load(f)  # Load only the text chunks
                    embeddings = OpenAIEmbeddings()
                    VectorStore = FAISS.from_texts(text_chunks, embedding=embeddings)
            else:
                embeddings = OpenAIEmbeddings()

                # Filter out empty chunks before creating VectorStore
                non_empty_chunks = [chunk for chunk in chunks if chunk.strip()]

                # Check if there are any non-empty chunks remaining
                if non_empty_chunks:
                    VectorStore = FAISS.from_texts(non_empty_chunks, embedding=embeddings)
                    with open(f"{store_name}.pkl", "wb") as f:
                        pickle.dump(non_empty_chunks, f)  # Pickle only the text chunks

        except FileNotFoundError:
            pass
        except Exception as e:
            st.error(f"Error loading or creating VectorStore: {e}")

        if VectorStore is not None:

            query = st.text_input("Search:", value="", key="search_input")

            if query:
                st.session_state.query_counter += 1
                docs = VectorStore.similarity_search(query=query, k=3)

                llm = OpenAI()
                chain = load_qa_chain(llm=llm, chain_type="stuff")
                with get_openai_callback() as cb:
                    response = chain.run(input_documents=docs, question=query)
                    st.write(response)

                # Submit query and chatbot response to Google Form
                form_response = submit_query_to_google_form(query, response, pdf.name)

if __name__ == '__main__':
    main()
